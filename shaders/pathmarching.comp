#version 460 core

//util.glsl declarations
vec4 ulp(vec4 value);
vec3 ulp(vec3 value);
vec2 ulp(vec2 value);

//THESE NEED TO BE IDENTICAL TO THE ONES DEFINED IN pathmarching.cpp
const uvec2 workGroupSize = uvec2(32);
const uvec2 workGroupCount = uvec2(4);

layout(local_size_x = 32, local_size_y = 32) in;
layout(binding = 0, rgba32f) uniform image2D hdrOut;
layout(binding = 1) uniform sampler2D earth_albedo_plus_height;
layout(binding = 2) uniform sampler2D moon_albedo_plus_height;
layout(binding = 3) uniform sampler2D gasgiant_albedo;

uniform uvec2 tileOffset;
uniform uint currentSample;
uniform uint samplesPerPass;

uniform uint passSeed;
uniform float time;
uniform mat4 viewMat;

uniform vec3 camera_pos;
uniform mat3 camera_rot;
uniform vec3 enterprise_pos;
uniform mat3 enterprise_rot;
uniform vec3 fractal_pos;
uniform mat3 fractal_rot;
uniform vec3 julia_c;

const bool orbit_cam = true;

const float world_scale = 1000;  //how big one unit in metern is (this is for easier camera control)

const float FAR_PLANE = 149597870700.+696342000.*10000/world_scale;

const float steps = 2000;
const float epsilonFactor = 1000;

const bool preview = false;
const int max_bounce = 16;  // maximal number of Light bounces

const float focal_length = 50;  // focal length in mm
//const vec3 ro = vec3(0.,0.,1.); // render origin
const vec3 camera_origin = vec3(0.,0.,1.); // render origin

const float pi = 3.14159265359;

const float light_phi = pi/2;
const float light_theta = 2*pi/5;


struct mat {
    uint type; // 0 lambertian; 1 metal; 2 pure Emmiter; 3 Volumetric
    uint custom;
    vec3 albedo;
    float fuzz;
    float IOR;
    float alpha;
    vec3 transmission_col;
    vec3 emmission;
//preview:
    float roughness;
    float refractionIndex;
    vec3 diff_col;
    vec3 spec_col;
};

mat transmission_lamb(vec3 lam_col, float alpha, vec3 transm_col){return mat(100,0,lam_col,0,1.45,alpha,transm_col,vec3(0),.3,.3,lam_col,vec3(1));}
mat lambertian(vec3 col){return mat(0, 0, col, 0, 1.45, 1, vec3(1), vec3(0), 0.3, 0.3, col, vec3(1));}
mat metal(vec3 col, float fuzz){return mat(1, 0, col, fuzz, 1.45, 1, vec3(1), vec3(0), 0.1, fuzz, col, col);}
mat transmission_emm(vec3 emm_col, float alpha, vec3 transm_col){return mat(102,0,vec3(0),0,1.45,alpha,transm_col,emm_col,.3,.3,emm_col,vec3(1));}
mat emitter(vec3 col){return mat(2, 0, vec3(0), 0, 1.45, 1, vec3(1), col, 0, 0, col, vec3(0));}
mat phong(vec3 col, float fuzz){return mat(4, 0, col, fuzz, 1.45, 1, vec3(1),vec3(0),0.3,fuzz,col,vec3(1));}
mat cook_torrance(vec3 col, float roughness){return mat(5, 0, col, roughness, 1.45, 1, vec3(1),vec3(0),0.3,roughness,col,vec3(1));}
mat custom(uint index){return mat(2, index, vec3(1,0,1),0, 1.45, 1, vec3(1),vec3(1,0,1),0.3,0.3,vec3(1,0,1),vec3(1));}
mat4 camera_mat = orbit_cam?viewMat:mat4(vec4(camera_rot[0],0),vec4(camera_rot[1],0),vec4(camera_rot[2],0),vec4(camera_pos,1));

struct object {
    uint obj_index;
    mat3 rotation;
    vec3 scaling;
    float scale;
    vec3 position;
    mat material;
};

struct hit {
    bool hit;
    float dist;
    uint steps;
    uint index;
};

vec3 sunPosition() {
    vec3 startPoint = normalize(vec3(0, 0.5, 1)) * 151600000000.;
    float angle = radians(360 * time / 10);
    vec3 rAxis = normalize(cross(startPoint, vec3(1, 0, 0)));
    mat3 rotationMatrix;
    rotationMatrix[0] = vec3(
        cos(angle) + rAxis.x * rAxis.x * (1 - cos(angle)),
        rAxis.y * rAxis.x * (1 - cos(angle)) + rAxis.z * sin(angle),
        rAxis.z * rAxis.x * (1 - cos(angle)) - rAxis.y * sin(angle)
    );
    rotationMatrix[1] = vec3(
        rAxis.x * rAxis.y * (1 - cos(angle)) - rAxis.z * sin(angle),
        cos(angle) + rAxis.y * rAxis.y * (1 - cos(angle)),
        rAxis.z * rAxis.y * (1 - cos(angle)) + rAxis.x * sin(angle)
    );
    rotationMatrix[2] = vec3(
        rAxis.x * rAxis.z * (1 - cos(angle)) + rAxis.y * sin(angle),
        rAxis.y * rAxis.z * (1 - cos(angle)) - rAxis.z * sin(angle),
        cos(angle) + rAxis.z * rAxis.z * (1 - cos(angle))
    );

    return rotationMatrix * startPoint;
}

const int num_obj = 9;
object world[num_obj] = object[num_obj](
//    object(10, mat3(1,0,0,0,1,0,0,0,1), vec3(1,1,1), 1000, vec3(0,0,0), custom(1)),  // earth 1k
//    object(11, mat3(1,0,0,0,1,0,0,0,1), vec3(1,1,1), 1000, vec3(0,0,0), custom(3)),  // moon 1k
//    object(1, mat3(1,0,0,0,1,0,0,0,1), vec3(1,1,1), 1000, vec3(0,0,0), custom(4)),  // gasgiant 1k
//    object(12, mat3(1,0,0,0,1,0,0,0,1), vec3(1,1,1), 1500, vec3(0,0,0), lambertian(vec3(.8))),  // ring 1k

    //lasers
    object(50, mat3(1,0,0,0,1,0,0,0,1), vec3(1,1,1), 1000, enterprise_pos, emitter(vec3(50,0,0))),  //laser test
    object(50, mat3(1,0,0,0,1,0,0,0,1), vec3(1,1,1), 1000, enterprise_pos, emitter(vec3(50,0,0))),  //laser test
    object(50, mat3(1,0,0,0,1,0,0,0,1), vec3(1,1,1), 1000, enterprise_pos, emitter(vec3(50,0,0))),  //laser test
    object(50, mat3(1,0,0,0,1,0,0,0,1), vec3(1,1,1), 1000, enterprise_pos, emitter(vec3(50,0,0))),  //laser test
    object(50, mat3(1,0,0,0,1,0,0,0,1), vec3(1,1,1), 1000, enterprise_pos, emitter(vec3(50,0,0))),  //laser test

    //solar system
    object(3, enterprise_rot, vec3(1,1,1), 157, enterprise_pos, lambertian(vec3(.8))),  //enterprise
//    object(2, fractal_rot, vec3(1,1,1), 1000, fractal_pos, lambertian(vec3(.5))),  //fractal
//    object(10, mat3(1,0,0,0,0,-1,0,1,0), vec3(1,1,1), 6371009, vec3(0,-(408000+12756270/2),0), custom(1)), //earth disp
    object(1, mat3(1,0,0,0,0,-1,0,1,0), vec3(1,1,1), 6371009, -vec3(384400000+12756270/2,800000+1737400,0), custom(1)), //earth
//    object(1, mat3(1,0,0,0,1,0,0,0,1), vec3(1,1,1), 6371009, vec3(0,408000+12756270/2,0), custom(1)), //earth
//    object(1, mat3(0,-1,0,1,0,0,0,0,1), vec3(1,1,1), 6376009, vec3(0,408000+12756270/2,0), custom(2)) //clouds
//    object(11, mat3(1,0,0,0,1,0,0,0,1), vec3(1,1,1), 1737400, vec3(397000000,408000+12756270/2,0), custom(3)),  //moon relative to earth
    object(11, mat3(1,0,0,0,1,0,0,0,1), vec3(1,1,1), 1737400, -vec3(0,800000+1737400,0), custom(3)),  //moon orbit
//    object(1, mat3(1,0,0,0,1,0,0,0,1), vec3(1,1,1), 1737400, -vec3(0,800000+1737400,0), custom(1)),  //moon orbit
//    object(1, mat3(1,0,0,0,1,0,0,0,1), vec3(1,1,1), 695700000., sunPosition(), emitter(vec3(100000)))  //sun
    object(1, mat3(1,0,0,0,1,0,0,0,1), vec3(1,1,1), 695700000., vec3(0, 0, 151600000000.), emitter(vec3(100000)))  //sun
);

//uint num_lights = 1;
//int lights[] = int[](8);
//bool active_lights[] = bool[](true,false,false,false,false,false);
//int first_laser = 1;
//int last_laser = 5;

//assumes that the lasers are at the begin of world[]
uint num_lasers = 5;
uint first_usable_laser = 0;

// returns the index of the laser in the world array
void add_laser(vec3 position, mat3 rotation, float thickness, vec3 color){
    if (first_usable_laser < num_lasers){
        world[first_usable_laser].obj_index = 5;
        world[first_usable_laser].rotation = rotation;
        world[first_usable_laser].position = position;
        world[first_usable_laser].scale = thickness;
        world[first_usable_laser].material = emitter(color);
        ++first_usable_laser;
    }
}

float atan2(float y, float x){
    if (x > 0) return atan(y/x);
    if (x < 0 && y >= 0) return atan(y/x)+pi;
    if (x < 0 && y < 0) return atan(y/x)-pi;
    if(x == 0 && y > 0) return pi/2;
    if(x == 0 && y < 0) return -pi/2;
    return 0;  // this is x == 0 && y == 0 which is technically undefined
}

struct cubic_spline4 {
    uint size;
    float x[4];
    float y[4];
    float z[4];
};

//random functions
uvec4 pcg4d(uvec4 v) {
    v = v * 1664525u + 1013904223u;
    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;
    v ^= v >> 16u;
    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;
    return v;
}

uint seed = 0;
uvec4 rand4u() {
    return pcg4d(uvec4(tileOffset * workGroupSize * workGroupCount + gl_GlobalInvocationID.xy, seed++, passSeed));
}

float uintToFloat(uint v) {
    return float(v) * (1.0 / float(0xffffffffu));
}
vec4 uintToFloat(uvec4 v) {
    return vec4(v) * (1.0 / float(0xffffffffu));
}

vec4 rand4(){
    return uintToFloat(rand4u());
}
vec3 rand3(){
    return uintToFloat(rand4u()).xyz;
}
vec2 rand2(){
    return uintToFloat(rand4u()).xy;
}
float rand(){
    return uintToFloat(rand4u()).x;
}

float gradient(vec3 map){
    return clamp(map.x, 0, 1);
}

vec3 random_in_unit_disk() {
    while (true) {
        vec3 p = vec3(2 * uintToFloat(rand4u()).xy - vec2(1), 0);
        if (length(p) >= 1) continue;
        return p;
    }
    return vec3(0);
}

vec3 rand_in_unit_sphere(){
    vec3 p;
    while (true){
        p = 2 * uintToFloat(rand4u()).xyz - vec3(1);
        if (length(p) >= 1) {continue;}
        break;
    }
    return p;
}
vec3 rand_unit_sphere(){
    return normalize(rand_in_unit_sphere());
}

vec3 rand_in_hemisphere(vec3 nor){
    vec3 in_unit_sphere = rand_in_unit_sphere();
    if (dot(in_unit_sphere, nor) > 0.) return in_unit_sphere;
    return -in_unit_sphere;
}

vec3 random_cosine_direction(){
    float r1 = rand();
    float r2 = rand();
    float phi = 2*pi*r1;
    return vec3(cos(phi)*sqrt(r2), sin(phi)*sqrt(r2), sqrt(1-r2));
}

float epsilon(vec3 pos) {
    return length(ulp(pos)) * epsilonFactor;
}

struct ONB {
    vec3 u;
    vec3 v;
    vec3 w;
};
ONB built_onb(vec3 n){
    n = normalize(n);
    vec3 a = abs(n.x)>.9?vec3(0,1,0):vec3(1,0,0);
    vec3 v = normalize(cross(n, a));
    return ONB(normalize(cross(n, v)), v, n);
}
vec3 localize_to_onb(vec3 a, ONB onb){
    return a.x*onb.u+a.y*onb.v+a.z*onb.w;
}

//DE of the primitives is from https://iquilezles.org/articles/distfunctions/
float dot2( in vec2 v ) { return dot(v,v); }
float dot2( in vec3 v ) { return dot(v,v); }
float ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }
float sdSphere( vec3 p, float s ){
    return length(p)-s;
}
float sdBox( vec3 p, vec3 b ){
    vec3 q = abs(p) - b;
    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}
float sdRoundBox( vec3 p, vec3 b, float r ){
    vec3 q = abs(p) - b;
    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;
}
float sdPlane( vec3 p, vec3 n, float h ){
    // n must be normalized
    return dot(p,n) + h;
}
float sdInfinteCylinder(vec3 p, vec3 c){
    return length(p.xz-c.xy)-c.z;
}
float sdCappedCylinder( vec3 p, float h, float r ){
    vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);
    return min(max(d.x,d.y),0.0) + length(max(d,0.0));
}
float sdCappedCylinder(vec3 p, vec3 a, vec3 b, float r){
    vec3  ba = b - a;
    vec3  pa = p - a;
    float baba = dot(ba,ba);
    float paba = dot(pa,ba);
    float x = length(pa*baba-ba*paba) - r*baba;
    float y = abs(paba-baba*0.5)-baba*0.5;
    float x2 = x*x;
    float y2 = y*y*baba;
    float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));
    return sign(d)*sqrt(abs(d))/baba;
}
float sdRoundedCylinder( vec3 p, float ra, float rb, float h ){
    vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );
    return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;
}
float sdSolidAngle(vec3 p, vec2 c, float ra){
    // c is the sin/cos of the angle
    vec2 q = vec2( length(p.xz), p.y );
    float l = length(q) - ra;
    float m = length(q - c*clamp(dot(q,c),0.0,ra) );
    return max(l,m*sign(c.y*q.x-c.x*q.y));
}
float sdEllipsoid( vec3 p, vec3 r ){
    float k0 = length(p/r);
    float k1 = length(p/(r*r));
    return k0*(k0-1.0)/k1;
}

// operations
// inner (i) Operations transform the parameterspace of the primitives,
// while outer (o) Operations transform the primitive it self
vec3 iElongate(vec3 pos, vec3 h){
    return max(abs(pos)-h, 0.0);
}
float oElongate(float dist, vec3 pos, vec3 h){
    vec3 q = abs(pos)-h;
    return dist + min(max(q.x,max(q.y,q.z)),0.0);
}
// this also scales the primitve. The amount of scaling is dependend on the used distance function
float oBevel(float dist, float bevel){
    return dist - bevel;
}
float oOnion(float dist, float thickness){
    return abs(dist)-thickness;
}
float oMorph(float d1, float d2, float t){
    return (1-t)*d1+t*d2;
}
// this extrudes the pos.xy distance of an 2d DE into 3d
float oExtrusion(float dist, vec3 pos, float h){
    vec2 w = vec2(dist, abs(pos.z) - h );
    return min(max(w.x,w.y),0.0) + length(max(w,0.0));
}
// this screws the pos.xy distance of an 2d DE into 3d
vec2 iScrew(vec3 pos, float o){
    return vec2( length(pos.xz) - o, pos.y );
}

// Boolean Operations, all of these are outer operations
float bU( float d1, float d2 ) {
    return min(d1,d2);
}
float bS( float d1, float d2 ) {
    return max(-d1,d2);
}
float bI( float d1, float d2 ) {
    return max(d1,d2);
}
float bD(float d1, float d2){
    return bS(bI(d1, d2), d1);
}
float sbU( float d1, float d2, float k ) {
    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );
    return mix( d2, d1, h ) - k*h*(1.0-h);
}
float sbS( float d1, float d2, float k ) {
    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );
    return mix( d2, -d1, h ) + k*h*(1.0-h);
}
float sbI( float d1, float d2, float k ) {
    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );
    return mix( d2, d1, h ) + k*h*(1.0-h);
}
float sbD(float d1, float d2, float k){
    return sbS(sbI(d1, d2, k), d1, k);
}
//Rotation and Translation
vec3 iTrans(vec3 pos, mat4 transform){
    vec4 tmp = inverse(transform)*vec4(pos, 1);
    //    if (tmp.w == 0) return vec3(tmp.x,tmp.y,tmp.z);
    return vec3(tmp.x/tmp.w,tmp.y/tmp.w,tmp.z/tmp.w);
}
//scaling http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/#rotation-and-translation
vec3 iScale(vec3 pos, vec3 s){
    return pos/s;
}
float oScale(float dist, vec3 s){
    return dist*min(s.x, min(s.y, s.z));
}
//mirroring (doesn't work for some reason)
vec3 iSymX(vec3 p){
    p.x = abs(p.x);
    return p;
}
vec3 iSymY(vec3 p){
    p.y = abs(p.y);
    return p;
}
vec3 iSymZ(vec3 p){
    p.z = abs(p.z);
    return p;
}
vec3 iSymXZ(vec3 p){
    p.xz = abs(p.xz);
    return p;
}
// own
float oDisp(float dist, float disp){
    return dist - disp;
}
float deManySpheres(vec3 pos){
    pos.xy = mod((pos.xy),1.0)-vec2(0.5);
    return length(pos)-0.4;
}
float deMandelbulb(vec3 pos, int Iterations, float Bailout) {
    float t = fract(0.0001*((time * 30)+15.));
    float y = 16.0*t*(1.0-t);
    float maxp = 8;
    float Power = -2*maxp*abs(t-0.5)+maxp;
//    float Power = 4;
    vec3 z = pos;
    float dr = 1.0;
    float r = 0.0;
    for (int i = 0; i < Iterations ; i++) {
        r = length(z);
        if (r>Bailout) break;
        float theta = asin( z.z/r );
        float phi = atan( z.y,z.x );
        dr =  pow( r, Power-1.0)*Power*dr + 1.0;

        float zr = pow( r,Power);
        theta = theta*Power;
        phi = phi*Power;
        z = zr*vec3( cos(theta)*cos(phi), cos(theta)*sin(phi), sin(theta) );
        z+=pos;
    }
    return 0.5*log(r)*r/dr;
}
float deJulia(vec3 p, int Iterations, float Bailout) {
//    vec3 c = vec3(0.4,-0.4,0.6);
    vec3 c = julia_c;
    float maxp = 8;
    float t = fract(0.01*((time * 30)+15.));
//    float power = -2*maxp*abs(t-0.5)+maxp;
    float power = 8;

    vec3 orbit = p;
    float dz = 1.0;

    for (int i=0; i<Iterations; i++) {

        float r = length(orbit);
        float o = acos(orbit.z/r);
        float p = atan(orbit.y/orbit.x);

        dz = power*pow(r,power-1)*dz;

        r = pow(r,power);
        o = power*o;
        p = power*p;

        orbit = vec3( r*sin(o)*cos(p), r*sin(o)*sin(p), r*cos(o) ) + c;

        if (dot(orbit,orbit) > Bailout) break;
    }
    float z = length(orbit);
    return 0.5*z*log(z)/dz;
}
float sdEnterprise(vec3 pos){
    return sbU(sbU(sbU(sbU(sbU(sbU(sbU(oBevel(sdCappedCylinder(pos, 1, 0.04), 0.02),sdEllipsoid(pos, vec3(0.7,0.2, 0.7)), 0.1),
    sdCappedCylinder(iTrans(pos, mat4(0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1))+vec3(-0.8, -1.1, 0), 0.2, 0.8), 0.01),
    sdCappedCylinder(iTrans(pos, mat4(0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1))+vec3(0, -2, -0.8), 0.1, 0.8), 0.01),
    sdCappedCylinder(iTrans(pos, mat4(0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1))+vec3(0, -2, 0.8), 0.1, 0.8), 0.01),
    sdBox(iTrans(pos, mat4(1, 0, 0, 0, 0, cos(pi/4), -sin(pi/4), 0, 0, sin(pi/4), cos(pi/4), 0, 0, 0, 0, 1))+vec3(-1.6, 0, 0.6), vec3(0.1,0.6,0.05)), 0.01),
    sdBox(iTrans(pos, mat4(1, 0, 0, 0, 0, cos(-pi/4), -sin(-pi/4), 0, 0, sin(-pi/4), cos(-pi/4), 0, 0, 0, 0, 1))+vec3(-1.6, 0, -0.6), vec3(0.1,0.6,0.05)), 0.01),
    sdBox(iTrans(pos, mat4(cos(-pi/5), -sin(-pi/5), 0, 0, sin(-pi/5), cos(-pi/5), 0, 0, 0, 0, 1, 0, 0, 0, 0, 1))+vec3(-0.2,0.6,0), vec3(0.2,0.5,0.05)),0.01);
}
float sdRing(vec3 pos, float outer, float inner, vec3 rotation, float thickness){
    return bI(bI(bD(sdSphere(pos,  outer), sdSphere(pos, inner)),
        sdPlane(pos, normalize(rotation), -thickness)), -sdPlane(pos, normalize(rotation), thickness));
}
float sdWarpTunnel(vec3 pos){
    pos = iTrans(pos, mat4(0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1));
    return -sdInfinteCylinder(pos, vec3(0,0,10));
}
float test(vec3 pos){
    //    float t = -2*abs(fract(0.1*(uTime+15))-0.5)+1;
    return oMorph(sdBox(pos,  vec3(1,1,1)), sdSphere(pos, 1), 0.5);
}
float deKaliRemix(vec3 p, int Iterations) {
    float Scale=1.2;
    vec3 Julia=vec3(-.2,-1.95,-.6);

    p=p.zxy;  //more natural rotation
    float alpha1 = 20;
    float alpha2 = 20;
    mat3 rot = mat3(cos(alpha1/180*3.14),-sin(alpha1/180*3.14),0,sin(alpha1/180*3.14),cos(alpha1/180*3.14),0,0,0,1)*mat3(cos(alpha2/180*3.14), 0, -sin(alpha2/180*3.14), 0, 1, 0, sin(alpha2/180*3.14), 0, cos(alpha2/180*3.14));

    for (int i=0; i<Iterations; i++) {
        p.xy=abs(p.xy);
        p=p*Scale+Julia;
        p*=rot;
    }
    return (length(p))*pow(Scale, -float(Iterations))*.9;
}
float deLaser(vec3 p, float thickness){
    return bI(sdPlane(p,vec3(0,1,0),0), sdInfinteCylinder(p, vec3(0,0,thickness)));
}

//Sphere UV project:
vec2 cartesian_to_polar(vec3 p){
    return vec2(atan2(p.y, p.x)/(2*pi), acos(p.z)/pi);
}

vec3 texcoord_sphereProj(vec3 p){
    vec2 phi_theta = cartesian_to_polar(normalize(p));
    return vec3(phi_theta, 0);
}

float distObj(object obj, vec3 pos){
    vec3 map = texcoord_sphereProj(pos);
    float height;
    switch(obj.obj_index){
        case 0:
            return sdBox(pos,  vec3(obj.scale));
        case 1:
            return sdSphere(pos,  obj.scale);
//        case 2:
//            return deJulia(pos, 10, 1000);
//            //return deKaliRemix(pos, 30);
        case 3:
            return sdEnterprise(pos/obj.scale)*obj.scale;
//        case 4:
//            return deKaliRemix(pos, 10);
        case 5:
            return deLaser(pos,obj.scale);
        case 6:
            return test(pos);
        case 7:
            return sbU(oBevel(sdBox(pos,  vec3(1,1,0.5)),0.01), sdEllipsoid(pos,  vec3(1,1,1)), 0.01);
        case 8:
            return sdPlane(pos, vec3(0,1,0),1);
        case 10: // earth
            height = texture(earth_albedo_plus_height, map.xy).w;
            height = height * 2 - 1;
            return oDisp(sdSphere(pos,  obj.scale), height*obj.scale*0.0025);
        case 11: // moon
            height = texture(moon_albedo_plus_height, map.xy).w;
            height = height * 2 - 1;
            return oDisp(sdSphere(pos,  obj.scale), height*obj.scale*0.01);
        case 12: // ring
            return sdRing(pos, obj.scale, obj.scale-obj.scale/10, vec3(0,1,1), .001);
        case 101:
            return -sdSphere(pos,  obj.scale);
        default:
            return 1.0/0.0; // maximal highp float
    }
}

hit map(vec3 pos){
    hit h = hit(false, 1.0/0.0, 0, 0);
    for (int i = 0; i < num_obj; ++i){
        float dist = oScale(distObj(world[i], iScale(inverse(world[i].rotation) * (pos - world[i].position), world[i].scaling)), world[i].scaling);
        if (dist < h.dist){
            h = hit(false, dist, 0, i);
        }
    }
    return h;
}

hit ray(vec3 ro, vec3 rd){
    hit h = hit(false, 0., 0, -1);
    for (; h.steps < steps; ++h.steps){
        vec3 rayEnd = ro + h.dist * rd;

        hit d = map(rayEnd);
        h.dist += d.dist;
        h.index = d.index;

        if (d.dist < epsilon(rayEnd)) {
            h.hit = true;
            return h;
        }
        if (h.dist > FAR_PLANE) {
            return h;
        }
    }
    h.hit = false; // aproximates object. Might be innacurate but as can be let in as long it doesnt cause problems
    return h;
}

vec3 numDiff(vec3 p, float e){
    vec2 h = vec2(e,min(int(passSeed),0));
    return normalize(vec3(map(p+h.xyy).dist - map(p-h.xyy).dist, map(p+h.yxy).dist - map(p-h.yxy).dist, map(p+h.yyx).dist - map(p-h.yyx).dist));
}
vec3 tetraNormUnfix(vec3 p, float h){ // for function f(p){
    //    const float h = eps; // replace by an appropriate value
    const vec2 k = vec2(1,-1);
    return normalize( k.xyy*map( p + k.xyy*h ).dist +
    k.yyx*map( p + k.yyx*h ).dist +
    k.yxy*map( p + k.yxy*h ).dist +
    k.xxx*map( p + k.xxx*h ).dist );
}
vec3 tetraNorm(vec3 pos){
    float h = epsilon(pos);
    int ZERO = min(int(passSeed),0); // non-constant zero
    vec3 n = vec3(0.0);
    for( int i=ZERO; i<4; i++) {
        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);
        n += e*map(pos+e*h).dist;//.x;
    }
    return normalize(n);
}
vec3 calcNormal(vec3 p, object obj){
    //    int n = 32;
    //    vec3 nor = vec3(0,0,0);
    //    for (int i=0; i< n; ++i){
    //        nor += tetraNorm(p, eps*rand(i*2565));
    //    }
    //    return nor/n;
    return tetraNorm(p);
//    return normalize(p-obj.position);
    //    return numDiff(p,obj.eps);
    //    return numDiff(p);
}

// normal
vec3 texcoord_nor(vec3 p, object obj){
    return obj.rotation*calcNormal(p, obj);
}

float fresnel_dielectric_cos(float cosi, float eta){
    /* compute fresnel reflectance without explicitly computing
     * the refracted direction */
    float c = abs(cosi);
    float g = eta * eta - 1.0 + c * c;
    float result;

    if (g > 0.0) {
        g = sqrt(g);
        float A = (g - c) / (g + c);
        float B = (c * (g + c) - 1.0) / (c * (g - c) + 1.0);
        result = 0.5 * A * A * (1.0 + B * B);
    }
    else {
        result = 1.0; /* TIR (no refracted component) */
    }

    return result;
}

float fresnel_dielectric(vec3 Incoming, vec3 Normal, float eta){
    /* compute fresnel reflectance without explicitly computing
     * the refracted direction */
    return fresnel_dielectric_cos(dot(Incoming, Normal), eta);
}

float node_fresnel(float ior, vec3 nor, vec3 V){
    nor = normalize(nor);
//    vec3 V = normalize(p-origin);
    //    vec3 V = cameraVec(g_data.P);

    float eta = max(ior, 0.00001);
    return fresnel_dielectric(V, nor, eta);
}

float cdot(vec3 a, vec3 b) {
    return clamp(dot(a,b), 0.0, 1.0);
}
float beckmannDistribution(float dotNH, float roughness) {
    float sigma2 = roughness * roughness;
    float alpha = acos(dotNH);

    // TASK: Compute d-term
    return (exp(-((tan(alpha) / sigma2) * (tan(alpha) / sigma2))) / (pi * sigma2 * pow(cos(alpha), 4)));
}
float schlickApprox(float dotVH, float n1, float n2) {
    float r0 = (n1 - n2) / (n1 + n2);
    float r0squared = r0 * r0;

    // TASK: Compute f-term
    return r0squared + (1 - r0squared) * pow(1 - dotVH, 5);
}
float geometricAttenuation(float dotNH, float dotVN, float dotVH, float dotNL) {
    // TASK: Compute g-term
    return min(1, min((2 * dotNH * dotVN) / (dotVH), (2 * dotNH * dotNL) / dotVH));
}
float cooktorranceTerm(vec3 n, vec3 l, float roughness, float refractionIndex) {
    vec3 v = inverse(mat3(camera_mat)) * vec3(0.0, 0.0, 1.0); // in eye space direction towards viewer simply is the Z axis
    vec3 h = normalize(l + v); // half-vector between V and L

    // precompute to avoid redundant computation
    float dotVN = cdot(v, n);
    float dotNL = cdot(n, l);
    float dotNH = cdot(n, h);
    float dotVH = cdot(v, h);

    float D = beckmannDistribution(dotNH, roughness);
//    float F = node_fresnel(refractionIndex, n, v);
    float F = schlickApprox(dotVH, 1.0, refractionIndex);
    float G = geometricAttenuation(dotNH, dotVN, dotVH, dotNL);

    return max(D * F * G / (4.0 * dotVN * dotNL), 0.0);
}
vec3 projected(vec3 vec, vec3 normal) {
    return normalize(vec - dot(vec, normal) * normal);
}
float orennayarTerm(float lambert, vec3 n, vec3 l, float roughness) {
    vec3 v = vec3(0.0, 0.0, 1.0);
    float sigma2 = roughness * roughness;

    float a = 1 - 0.5 * (sigma2 / (sigma2 + 0.57));
    float b = 0.45 * (sigma2 / (sigma2 + 0.09));
    float alpha = max(acos(dot(l, n)), acos(dot(v, n)));
    float beta = min(acos(dot(l, n)), acos(dot(v, n)));
    return lambert * (a + (b * cdot(projected(l, n), projected(v, n)) * sin(alpha) * tan(beta)));
}

vec3 sky(vec3 direction){
//    float t = 0.75*(direction.x + 1.0);
//    return vec3(1.-t) + t*vec3(0.5, 0.7, 1.0);
//    return vec3(1.-t) + t*vec3(0.);
//    return vec3(col_ramp(gradient(direction-vec3(.8,0,0)), 0, 0.086, 0, 1)*10);
    //    return vec3(1);
    return vec3(0.);
}

struct path {
    bool stop;
    vec3 attenuation;
    vec3 direction;
    vec3 emmission;
    bool specular;  // no importance sampling
//    bool inverted[num_obj];
};

vec3 reflect(vec3 v, vec3 n) {
    return v - 2*dot(v,n)*n;
}

vec3 sphere_to_cart(vec2 p){
    return vec3(cos(p.x)*sin(p.y), sin(p.x)*sin(p.y), cos(p.y));
}

bool[num_obj] create_false_array(){
    bool res[num_obj];
    for (int i = 0; i < num_obj; ++i) res[i] = false;
    return res;
}

float rough_to_expo(float rough){
    return 4500.*pow(1000000., -rough)-0.004;  // experimenteller schätzungswert
}

path scatter(mat material, uint index, vec3 p, vec3 origin, vec3 normal, vec3 dir_in, ONB onb, out float pdf){
//    if (100 <= material.type){ //transmission
////        if (material.alpha == 0){
////            if (world[index].obj_index < 100) world[index].obj_index += 100;
////            else world[index].obj_index -= 100;
////            return path(false,vec3(1),dir_in,vec3(0));
////        }
////        if (material.alpha != 1) {
//////            world[index].obj_index = (world[index].obj_index+100)%200;
////            if (world[index].obj_index < 100) world[index].obj_index += 100;
////            else world[index].obj_index -= 100;
////            return path(false,material.alpha * material.transmission_col+material.alpha*vec3(1),dir_in,vec3(0), false);
////        }
//        if (rand() > material.alpha) {
////            world[index].obj_index = (world[index].obj_index+100)%200;
////            world[index].obj_index = 201;
//            if (world[index].obj_index == 1) world[index].obj_index = 101;
////            else if (world[index].obj_index == 101) world[index].obj_index = 1;
//            else world[index].obj_index = 110;
////            world[index].obj_index = 101;
////            return path(false,material.transmission_col,dir_in,vec3(0));
//            return path(false,vec3(1),dir_in,vec3(0), false);
//        }
//        pdf = 1;
//        return path(true, vec3(1), vec3(0),  vec3(1), false);
////        material.type -= 100;
////        material.type = 2;
//    }
    if (material.type == 0) {  //lambertian
        vec3 new_direction = normalize(localize_to_onb(random_cosine_direction(), onb));

//        vec3 new_direction =  normalize(normalize(normal) + rand_unit_sphere());
//        if ((new_direction.x < 1e-8) && (new_direction.y < 1e-8) && (new_direction.z < 1e-8))
//            new_direction = normal;
        pdf = dot(normal, new_direction)/pi;
        return path(false, material.albedo, new_direction, vec3(0), false/*, create_false_array()*/);
    }
//    if (material.type == 1) { //metal
//        // funktioniert nur gut für kleine fuzz, da kein importance sampling
//        vec3 new_direction = normalize(normalize(reflect(dir_in, normal)) + material.fuzz*rand_in_unit_sphere());
//        pdf = 1;
//        return path(dot(new_direction, normal) <= 0, material.albedo, new_direction, vec3(0), true);
//    }
    if (material.type == 2){ //emmission
        return path(true, vec3(1), vec3(0), material.emmission, false/*, create_false_array()*/);
    }
//    if (material.type == 4){ //phong
////        float fresnel = node_fresnel(material.IOR, normal, p, origin);
//        float ks = .5;
//        float kd = 1-ks;
//        float n = rough_to_expo(material.fuzz);
////        float alpha = pi;
////        float brdf = kd/pi*ks*(n+2)/2*pi*pow(cos(alpha), n);
//        if (rand() < kd){  // diffuse
////            return path(true, vec3(1), vec3(0), vec3(1,0,0), false);
//            vec3 new_direction = normalize(localize_to_onb(random_cosine_direction(), onb));
//            pdf = dot(normal, new_direction)/pi;
//            return path(false, material.albedo, new_direction, vec3(0), false);
//        }
//        else{  // specular
//            ONB refl_onb = built_onb(reflect(dir_in, normal));
//            vec3 new_direction = sphere_to_cart(vec2(acos(pow(rand(), 1/float(n+1))), 2*pi*rand()));
//            new_direction = normalize(localize_to_onb(new_direction, refl_onb));
////            pdf = (n+1)/(2*pi)*pow(dot(reflect(dir_in, normal), new_direction), n);
//            pdf = (n+1)/(2*pi)*pow(dot(reflect(new_direction, normal), dir_in), n);
//            return path(false, vec3(1), new_direction, vec3(0), true);
//        }
//    }
    if (material.type == 5){ //cook_torrance
        float roughness = .1;
        float IOR = 1.45;
//        float F = schlickApprox(cdot(vec3(), normalize(dir_in)), 1.0, IOR);
        float F = .5;
        if (rand() < F){  // diffuse
            vec3 new_direction = normalize(localize_to_onb(random_cosine_direction(), onb));
            pdf = dot(normal, new_direction)/pi;
            return path(false, material.albedo, new_direction, vec3(0), false/*, create_false_array()*/);
        }
        else { // specular
            float z1 = rand(), z2 = rand();
            float theta_m = atan(sqrt(-roughness*roughness*log(1-z1)));
            float phi_m = 2*pi*z2;
            vec3 m = sphere_to_cart(vec2(theta_m, phi_m));
            vec3 o = 2*abs(dot(dir_in, m))*m-dir_in;
            vec3 new_dir = normalize(localize_to_onb(o, onb));
            float pdf = beckmannDistribution(cdot(normal, normalize(new_dir + dir_in)), roughness)*abs(dot(m, normal))/(4*abs(dot(o, m)));
            return path(false, vec3(1), new_dir, vec3(0), true/*, create_false_array()*/);
        }

//            ONB refl_onb = built_onb(reflect(dir_in, normal));
//            vec3 new_direction = sphere_to_cart(vec2(acos(pow(rand(), 1/float(n+1))), 2*pi*rand()));
//            new_direction = normalize(localize_to_onb(random_cosine_direction(), refl_onb));
//            //            pdf = (n+1)/(2*pi)*pow(dot(reflect(dir_in, normal), new_direction), n);
//            pdf = (n+1)/(2*pi)*pow(dot(reflect(new_direction, normal), dir_in), n);
//        }
    }
    return path(true, vec3(0),vec3(0),vec3(0), false/*, create_false_array()*/);
}

path scatter_light(vec3 p, vec3 normal, ONB onb, out float pdf){
//    float random_light = rand();
//    if (random_light == 1) random_light = 0.999999999999999999;
//    random_light = floor(random_light*float(num_lights));
//    uint light_index = -1;
//    for (int i = 0; i < lights.length(); ++i)if (active_lights[i]){
//        if (random_light == 0) {light_index = lights[i]; break;}
//        else --random_light;
//    }
//    uint light_index = active_lights[uint(floor(random_light*float(num_lights)))];
    uint light_index = num_obj-1;
    float radius = world[light_index].scale;
    vec3 position = world[light_index].position;

    vec3 on_light = rand_in_unit_sphere()*world[light_index].scale+world[light_index].position;
    vec3 new_direction = normalize(on_light - p);

    float cos_theta_max = sqrt(abs(1 - radius*radius/(length(position-p)*length(position-p))));
    float solid_angle = 2*pi*(1-cos_theta_max);
    if (radius/length(position-p) > 1) pdf = 0; else pdf = 1/solid_angle;
    pdf = 1/solid_angle;

    return path(dot(new_direction, normal) < 0, vec3(1), new_direction, vec3(0), false/*, create_false_array()*/);
}

float scattering_pdf(mat material, uint index, vec3 p, vec3 origin, vec3 normal, vec3 scattered, vec3 dir_in, bool specular){
//    if (100 <= material.type) return 1;
    float cosine = dot(normal, normalize(scattered));
    if (material.type == 0) {  //lambertian
        return cosine < 0 ? 0 : cosine/pi;
    }
    if (material.type == 2) return 1;
//    if (material.type == 4){ //phong
//        // experimentelle Vergleichswerte mit Blender.
//        // Abweichung existiert da Blender Microfacettenshader nutzt und kein cosine-lobe
//        //rough = 0 ca. n = 5000
//        //rough = 1 => n = 0
//        //rough = .5 ca n= 5
//        //rough = 0.1673320053 ca n = 300 bis n = 200
//
////        float fresnel = node_fresnel(material.IOR, normal, p, origin);
//        float ks = .5;
//        float kd = 1-ks;
//        float n = rough_to_expo(material.fuzz);
////        float cos_alpha = dot(reflect(dir_in, normal), scattered);
////        float brdf = kd/pi+ks*(n+2)/2*pi*pow(cos_alpha, n);
////        vec3 h = normalize(dir_in+scattered);
////        float brdf;
////        if (specular) brdf = (n+1)/(2*pi)*pow(dot(reflect(scattered, normal), dir_in), n);
////        else brdf = 1/pi;
//        float brdf = kd/pi+ks*(n+2)/(2*pi)*pow(dot(reflect(scattered, normal), dir_in), n);
//        return brdf*cosine;
//    }
    if (material.type == 5){ //cook-torrance
        float roughness = .1;
        float IOR = 1.45;
        vec3 h = normalize(dir_in+scattered);
        float F = schlickApprox(cdot(h, normalize(dir_in)), 1.0, IOR);
        return (cosine < 0 ? 0 : cosine/pi)*(1-F)+
            F*beckmannDistribution(cdot(normal, h), roughness)*
            geometricAttenuation(cdot(normal, h), cdot(dir_in, normal), cdot(dir_in, h), cdot(normal, scattered))/
            (4*abs(dot(dir_in, normal))*abs(dot(scattered, normal)));
    }
    return 0;
}

vec3 polar_to_cartisan(vec2 p){
    p = vec2(p.x*2*pi, p.y*pi);
    return vec3(cos(p.x)*sin(p.y), sin(p.x)*sin(p.y), cos(p.y));
}

mat planet(object obj, inout vec3 p, inout vec3 normal){
    vec3 localPos = iScale(inverse(obj.rotation) * (p - obj.position), obj.scaling);
    vec3 map = texcoord_sphereProj(localPos);
    vec3 col = texture(earth_albedo_plus_height, map.xy).xyz;
    col = mix(col,vec3(1),texture(earth_albedo_plus_height,map.xy).w);
    return lambertian(col);
}
mat moon(object obj, inout vec3 p, inout vec3 normal){
    vec3 localPos = iScale(inverse(obj.rotation) * (p - obj.position), obj.scaling);
    vec3 map = texcoord_sphereProj(localPos);
    vec3 col = texture(moon_albedo_plus_height, map.xy).xyz;
    return lambertian(col);
}
mat gasagiant(object obj, inout vec3 p, inout vec3 normal){
    vec3 localPos = iScale(inverse(obj.rotation) * (p - obj.position), obj.scaling);
    vec3 map = texcoord_sphereProj(localPos);
    vec3 col = texture(gasgiant_albedo, map.xy).xyz;
    return lambertian(col);
}
mat clouds_low(object obj, inout vec3 p, inout vec3 normal){
//    float planet_rot = 0;
//    float wind = 0;
//
//    vec3 map = texcoord_nor(p, obj);
//    map = mat3(cos(planet_rot),-sin(planet_rot),0,sin(planet_rot),cos(planet_rot),0,0,0,1)*map;
//    map.x += wind;
//    float cloads = cloud_mask(map);
//    return transmission_emm(vec3(1), cloads, vec3(1));
    return transmission_emm(vec3(1), 0.5, vec3(1));
}

mat cust_mat(object obj, vec3 p, inout vec3 normal){
    switch(obj.material.custom){
        case 1:  // planet
            return planet(obj, p, normal);
        case 2:  // low clouds
            return clouds_low(obj, p, normal);
        case 3: // moon
            return moon(obj, p, normal);
        case 4: // gas Giant
            return gasagiant(obj, p, normal);
        case 0:
        default:
            return obj.material;
//            return scatter(obj.material, p, normal, dir_in);
    }
}

vec3 pathtracing(vec3 origin, vec3 direction){
    path trace = path(false, vec3(1), direction, vec3(0), false/*, create_false_array()*/);
    for (int i = 0; i < max_bounce; ++i){
        hit r = ray(origin, trace.direction);
        if (r.hit){
            object obj = world[r.index];
            vec3 p = origin + r.dist*trace.direction;
            vec3 normal = calcNormal(p, obj);
            ONB onb = built_onb(normal);
            float pdf_material = 0;
            mat material = cust_mat(obj, p, normal);
            path new_trace = scatter(material, r.index, p, origin, normal, trace.direction, onb, pdf_material);
//            if (new_trace.specular){
//                trace = path(new_trace.stop,
//                trace.attenuation*new_trace.attenuation,
//                new_trace.direction, trace.emmission+new_trace.emmission*trace.attenuation, false);
//            }
//            else {
                //sampling all directions
                //            vec3 a_new = new_trace.attenuation*scattering_pdf(material, r.index, p, origin, normal, new_trace.direction)/pdf;
                //            trace = path(trace.stop||new_trace.stop, trace.attenuation*a_new, new_trace.direction, trace.emmission+new_trace.emmission*trace.attenuation);
                //            origin = p+2*obj.eps*normalize(trace.direction+normal);

                //sampling only light
            float pdf_light = 0;
            path light_trace = scatter_light(p, normal, onb, pdf_light);

            //            int random_pdf = int(floor(rand()*2.));
            vec3 scattered = rand()<.5?new_trace.direction:light_trace.direction;
//            vec3 scattered = new_trace.direction;
            //            vec3 scattered = light_trace.direction;
            //            vec3 new_direction = random_pdf==0?new_trace.direction:light_trace.direction;
            //            pdf_light = 1/pdf_light*10;
            //            pdf_light = pdf_light;
            //            pdf_light = 10000000;
            if (isnan(pdf_light)) return vec3(1, 0, 0);
            //            pdf_light = 1;
            //            return vec3(1/pdf_light);
            //            vec3 new_direction = new_trace.direction;
            float pdf_val = .5*pdf_material+.5*pdf_light;
//            float pdf_val = pdf_material;
//                        float pdf = random_pdf==0?pdf_material:pdf_light;
            //            float pdf_val = pdf_light;

            //            trace = path(new_trace.stop||light_trace.stop,
            //                trace.attenuation*new_trace.attenuation*scattering_pdf(material, r.index, p, origin, normal, light_trace.direction)/pdf_light,
            //                light_trace.direction, trace.emmission+new_trace.emmission*trace.attenuation);
            trace = path(new_trace.stop, //||light_trace.stop,
            trace.attenuation*new_trace.attenuation*scattering_pdf(material, r.index, p, origin, normal, scattered, trace.direction, new_trace.specular)/pdf_val,
            scattered, trace.emmission+new_trace.emmission*trace.attenuation, false/*, trace.inverted*/);
//            for (int j = 0; j < num_obj; ++j) trace.inverted[j] = (trace.inverted[j] == new_trace.inverted[j]);

//            }

            float eps = epsilon(p);
            origin = p+2*eps*normalize(trace.direction+normal);
        }
        else {
            vec3 col = trace.emmission + trace.attenuation*sky(trace.direction);
            return col;
        }
        if (trace.stop) return trace.emmission;
    }
    return vec3(0);
}

vec3 getRayDir(vec2 p, float aspect){
    float sensor_width = 35; // sensor width is identic to Blender Camera
    float FOV = 2 * atan(sensor_width/(2*focal_length));  // in rad
    float renderWidth = 2;
    float z0 = renderWidth / (2 * tan(FOV / 2));
    p.x *= aspect;
    return normalize(vec3(p.xy,-z0));
}

void main(){
    uvec2 texelCoord = ivec2(tileOffset * workGroupSize * workGroupCount + gl_GlobalInvocationID.xy);
    ivec2 resolution = imageSize(hdrOut);

    if (texelCoord.x >= resolution.x || texelCoord.y >= resolution.y) return;

    for (int i = 0; i < num_obj; ++i){
        world[i].scale /= world_scale;
        world[i].position /= world_scale;
    }

    vec3 light_dir = vec3(cos(light_phi)*sin(light_theta),cos(light_theta),sin(light_phi)*sin(light_theta));
    vec3 interp_light_dir = normalize(light_dir);

    vec2 p = (vec2(texelCoord) / resolution) * 2 - 1;
    float aspect = float(resolution.x) / float(resolution.y);

    vec4 col = vec4(.1,.1,.1,1);

    //vec3 position, mat3 rotation, float thickness, vec3 color
    add_laser(enterprise_pos, mat3(1,0,0,0,cos(3*pi/5),-sin(3*pi/5),0,sin(3*pi/5),cos(3*pi/5))*mat3(cos(3*pi/5),-sin(3*pi/5),0,sin(3*pi/5),cos(3*pi/5),0,0,0,1)*enterprise_rot, 0.001, 10*vec3(0.45, 0.75, 0.96));

    // for noise testing
    //    col = vec4(0,0,0,1);
    //    for (int i = 0; i <10; ++i){
    //        col.xyz += vec3(rand());
    //    }
    //    col.xyz /= 10.;
    //    imageStore(hdrOut, ivec2(texelCoord), col);
    //    return;

//    vec3 ro = inverse(mat3(camera_mat))*(camera_origin-camera_mat[3].xyz);
    vec3 ro = camera_origin-camera_mat[3].xyz;
    if (orbit_cam) ro = inverse(mat3(camera_mat))*ro;

    if (preview) {
        col = vec4(float(currentSample) + float(samplesPerPass) - float(currentSample) - float(samplesPerPass) + 0.1);
        vec3 rd = inverse(mat3(camera_mat))*getRayDir(p, aspect);
        hit r = ray(ro, rd);
        float t = r.dist;
        //    col = float(r.steps)/float(steps)*vec4(1,1,1,1);
        if (r.hit){
            object obj = world[r.index];
            vec3 pos = ro + t*rd;
            vec3 nor = calcNormal(pos, obj);
            mat material = cust_mat(obj, pos, nor);
            float diffuseTerm = cdot(nor, interp_light_dir);
            diffuseTerm = orennayarTerm(diffuseTerm, nor, interp_light_dir, material.roughness);
            diffuseTerm = max(diffuseTerm, 0.1);
            float specularTerm = cooktorranceTerm(nor, interp_light_dir, material.roughness, material.refractionIndex);
            col = clamp(vec4(material.diff_col,1) * diffuseTerm + vec4(material.spec_col,1) * specularTerm, 0.0, 1.0);

//            vec3 diff_col = vec3(0);
//            vec3 map = mapping(pos, obj);
            //            diff_col = vec3(fade(.1));
            //            diff_col = vec3(perlin_noise_p(map.x,map.y,map.z));
//            float val;
//            vec4 coll;
//            node_noise_texture_3d(map, 10., 2., 0.5, 0., val, coll);
//            diff_col = coll.xyz;

//            col = clamp(vec4(diff_col,1) * diffuseTerm + vec4(obj.material.spec_col,1) * specularTerm, 0.0, 1.0);

            //        hit tmp = ray(pos+nor*eps(t)*2, interp_light_dir);
//            hit tmp = ray(pos+nor*obj.eps*2, interp_light_dir);
//            float TMP = (tmp.hit) ? tmp.dist : 0;
//            float sun_sh = step(TMP, 0.0);
//            vec4 shadow = vec4(1, 1, 1, 1)*clamp(10*pow(0.18*sun_sh, 0.4545), 0.4, 1.);
//            //            col = col*shadow;
//
//            //            col = world[r.index].diff_col;
//            vec3 map = texcoord_nor(pos, obj);
//            col = vec4(map,1);
        }
    }
    else {
        vec3 pathTraceCol = vec3(0);
        for (int i = 0; i < samplesPerPass; i++) {
            vec3 rd = inverse(mat3(camera_mat)) * getRayDir(p + (rand2() / resolution) * 2, aspect);
            pathTraceCol += pathtracing(ro, rd);
        }
        vec4 pcol = vec4(pathTraceCol,1);
        col = imageLoad(hdrOut, ivec2(texelCoord));
        col.xyz = (float(currentSample) / float(currentSample + samplesPerPass)) * col.xyz + pcol.xyz / float(currentSample + samplesPerPass);
    }

    imageStore(hdrOut, ivec2(texelCoord), col);
}