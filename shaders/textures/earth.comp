#version 460 core

//const int texture_resolution = 512;
const uvec2 workGroupSize = uvec2(32);
const uvec2 workGroupCount = uvec2(4);

layout(local_size_x = workGroupSize.x, local_size_y = workGroupSize.y) in;
layout(rgba8, binding = 0) writeonly uniform image2D albedo_plus_height;

uniform uvec2 tileOffset;
uniform float time;
uniform float lastTime;

const float pi = 3.14159265359;
float atan2(float y, float x){
    if (x > 0) return atan(y/x);
    if (x < 0 && y >= 0) return atan(y/x)+pi;
    if (x < 0 && y < 0) return atan(y/x)-pi;
    if(x == 0 && y > 0) return pi/2;
    if(x == 0 && y < 0) return -pi/2;
    return 0;  // this is x == 0 && y == 0 which is technically undefined
}
vec3 mix_add(float fac, vec3 col1, vec3 col2){
    fac = clamp(fac, 0., 1.);
    return mix(col1, col1 + col2, fac);
}
float linear_rgb_curve(float inp, float fac, float min, float max){
    float m = 1/(max-min);
    float b = -min*m;
    return mix(inp, inp*m+b, fac);
}
float col_ramp(float fac, float min, float max, float val_min, float val_max){
    float m = (val_max-val_min)/(max-min);
    float b = val_min-min*m;
    return (fac < min) ? val_min : ((fac > max) ? val_max : fac*m+b);
}

struct cubic_spline4 {
    uint size;
    float x[4];
    float y[4];
    float z[4];
};

cubic_spline4 init_interp(float x[4], float y[4]){
    const uint size = 4;
    float x_diff[size-1], y_diff[size-1];
    for (uint i = 0; i < size-1; ++i){
        x_diff[i] = x[i+1]-x[i];
        y_diff[i] = y[i+1]-y[i];
    }
    float li[size], li_1[size-1], z[size];
    li[0] = sqrt(2*x_diff[0]);
    li_1[0] = 0.;
    float b0 = 0.;
    z[0] = b0 / li[0];

    for (uint i = 1; i < size-1; ++i){
        li_1[i] = x_diff[i-1] / li[i - 1];
        li[i] = sqrt(2 * (x_diff[i - 1] + x_diff[i]) - li_1[i - 1] * li_1[i - 1]);
        float bi = 6 * (y_diff[i] / x_diff[i] - y_diff[i - 1] / x_diff[i - 1]);
        z[i] = (bi - li_1[i - 1] * z[i - 1]) / li[i];
    }
    uint i = size - 1;
    li_1[i - 1] = x_diff[size - 2] / li[i - 1];
    li[i] = sqrt(2 * x_diff[size - 2] - li_1[i - 1] * li_1[i - 1]);
    float bi = 0.0;
    z[i] = (bi - li_1[i - 1] * z[i - 1]) / li[i];

    i = size - 1;
    z[i] = z[i] / li[i];
    for (uint i = size - 2; i > -1; --i){
        z[i] = (z[i] - li_1[i - 1] * z[i + 1]) / li[i];
    }
    return cubic_spline4(size, x, y, z);
}
uint binary_search(float t, float x[4]){
    const uint size = 4;
    uint low = 0u, high = size;
    while (low <= high){
        uint mid = low + uint(ceil(float(high - low)/2.));
        if (x[mid] == t) return mid;
        if (x[mid] < t) low = mid + 1;
        else high = mid - 1;
    }
    return high;
}
float get_spline_point4(float t, cubic_spline4 spline){
    uint index = binary_search(t, spline.x);
    index = clamp(index, 1, spline.size - 1);

    float xi1 = spline.x[index], xi0 = spline.x[index - 1];
    float yi1 = spline.y[index], yi0 = spline.y[index - 1];
    float zi1 = spline.z[index], zi0 = spline.z[index - 1];
    float hi1 = xi1 - xi0;

    float f0 = zi0 / (6 * hi1) * (xi1 - t) * (xi1 - t) * (xi1 - t)+
    zi1 / (6 * hi1) * (t - xi0) * (t - xi0) * (t - xi0) +
    (yi1 / hi1 - zi1 * hi1 / 6) * (t - xi0) +
    (yi0 / hi1 - zi0 * hi1 / 6) * (xi1 - t);
    return f0;
}

vec3 comb_rgb_curv_pre_def(vec3 col){
    float x[4] = float[](0, 0.123354, 0.255016, 1);
    float y[4] = float[](0, 0.272115, 0.691346, 1);
    cubic_spline4 curve = init_interp(x, y);
    return vec3(get_spline_point4(col.x, curve), get_spline_point4(col.y, curve), get_spline_point4(col.z, curve));
    //    return vec3(col.x);//, get_spline_point4(col.y, curve), get_spline_point4(col.z, curve));
}

float uintToFloat(uint v) {
    return float(v) * (1.0 / float(0xffffffffu));
}
vec4 uintToFloat(uvec4 v) {
    return vec4(v) * (1.0 / float(0xffffffffu));
}

uint rot(uint x, uint k){
    return (x << k) | (x >> (32 - k));
}
uint final(uint a, uint b, uint c){
    c ^= b;
    c -= rot(b, 14);
    a ^= c;
    a -= rot(c, 11);
    b ^= a;
    b -= rot(a, 25);
    c ^= b;
    c -= rot(b, 16);
    a ^= c;
    a -= rot(c, 4);
    b ^= a;
    b -= rot(a, 14);
    c ^= b;
    c -= rot(b, 24);
    return c;
}
uint hash_uint2(uint kx, uint ky){
    uint a, b, c;
    a = b = c = 0xdeadbeefu + (2u << 2u) + 13u;
    b += ky;
    a += kx;
    return final(a,b,c);
}
uint hash_uint3(uint kx, uint ky, uint kz){
    uint a, b, c;
    a = b = c = 0xdeadbeefu + (3u << 2u) + 13u;
    c += kz;
    b += ky;
    a += kx;
    return final(a,b,c);
}
uint hash_uint4(uint kx, uint ky, uint kz, uint kw){
    uint a, b, c;
    a = b = c = 0xdeadbeefu + (4u << 2u) + 13u;

    a += kx;
    b += ky;
    c += kz;
    mix(a, b, c);

    a += kw;
    return final(a,b,c);
}
uint hash_int3(int kx, int ky, int kz){
    return hash_uint3(uint(kx), uint(ky), uint(kz));
}
float hash_uint2_to_float(uint kx, uint ky){
    return float(hash_uint2(kx, ky)) / float(0xFFFFFFFFu);
}
float hash_uint3_to_float(uint kx, uint ky, uint kz){
    return float(hash_uint3(kx, ky, kz)) / float(0xFFFFFFFFu);
}
float hash_uint4_to_float(uint kx, uint ky, uint kz, uint kw){
    return float(hash_uint4(kx, ky, kz, kw)) / float(0xFFFFFFFFu);
}
float hash_vec2_to_float(vec2 k){
    return hash_uint2_to_float(floatBitsToUint(k.x), floatBitsToUint(k.y));
}
float hash_vec3_to_float(vec3 k){
    return hash_uint3_to_float(floatBitsToUint(k.x), floatBitsToUint(k.y), floatBitsToUint(k.z));
}
float hash_vec4_to_float(vec4 k){
    return hash_uint4_to_float(floatBitsToUint(k.x), floatBitsToUint(k.y), floatBitsToUint(k.z), floatBitsToUint(k.w));
}
vec3 hash_vec3_to_vec3(vec3 k){
    return vec3(hash_vec3_to_float(k), hash_vec4_to_float(vec4(k, 1.0)), hash_vec4_to_float(vec4(k, 2.0)));
}
float tri_mix(float v0, float v1, float v2, float v3, float v4, float v5,float v6,float v7,float x,float y,float z){
    float x1 = 1.0 - x;
    float y1 = 1.0 - y;
    float z1 = 1.0 - z;
    return z1 * (y1 * (v0 * x1 + v1 * x) + y * (v2 * x1 + v3 * x)) +
    z * (y1 * (v4 * x1 + v5 * x) + y * (v6 * x1 + v7 * x));
}
float fade(float t){
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}
float negate_if(float value, uint condition){
    return (condition != 0u) ? -value : value;
}
vec3 random_vec3_offset(float inp){
    return vec3(100.0 + hash_vec2_to_float(vec2(inp, 0.0)) * 100.0,
    100.0 + hash_vec2_to_float(vec2(inp, 1.0)) * 100.0,
    100.0 + hash_vec2_to_float(vec2(inp, 2.0)) * 100.0);
}
float noise_grad(uint hash, float x, float y, float z){
    uint h = hash & 15u;
    float u = h < 8u ? x : y;
    float vt = ((h == 12u) || (h == 14u)) ? x : z;
    float v = h < 4u ? y : vt;
    return negate_if(u, h & 1u) + negate_if(v, h & 2u);
}
float noise_perlin(vec3 vec){
    int X = int(floor(vec.x));
    int Y = int(floor(vec.y));
    int Z = int(floor(vec.z));
    float fx = fract(vec.x);
    float fy = fract(vec.y);
    float fz = fract(vec.z);

    float u = fade(fx);
    float v = fade(fy);
    float w = fade(fz);

    float r = tri_mix(noise_grad(hash_int3(X, Y, Z), fx, fy, fz),
    noise_grad(hash_int3(X + 1, Y, Z), fx - 1, fy, fz),
    noise_grad(hash_int3(X, Y + 1, Z), fx, fy - 1, fz),
    noise_grad(hash_int3(X + 1, Y + 1, Z), fx - 1, fy - 1, fz),
    noise_grad(hash_int3(X, Y, Z + 1), fx, fy, fz - 1),
    noise_grad(hash_int3(X + 1, Y, Z + 1), fx - 1, fy, fz - 1),
    noise_grad(hash_int3(X, Y + 1, Z + 1), fx, fy - 1, fz - 1),
    noise_grad(hash_int3(X + 1, Y + 1, Z + 1), fx - 1, fy - 1, fz - 1),
    u,
    v,
    w);

    return r;
}
float noise_scale3(float result){
    return 0.9820 * result;
}
float snoise(vec3 p){
    float r = noise_perlin(p);
    return (isinf(r)) ? 0.0 : noise_scale3(r);
}
float noise(vec3 p){
    return 0.5 * snoise(p) + 0.5;
}
float fractal_noise(vec3 p, float octaves, float roughness){
    float fscale = 1.0;
    float amp = 1.0;
    float maxamp = 0.0;
    float sum = 0.0;
    octaves = clamp(octaves, 0.0, 15.0);
    int n = int(octaves);
    for (int i = 0; i <= n; i++) {
        float t = noise(fscale * p);
        sum += t * amp;
        maxamp += amp;
        amp *= clamp(roughness, 0.0, 1.0);
        fscale *= 2.0;
    }
    float rmd = octaves - floor(octaves);
    if (rmd != 0.0) {
        float t = noise(fscale * p);
        float sum2 = sum + t * amp;
        sum /= maxamp;
        sum2 /= maxamp + amp;
        return (1.0 - rmd) * sum + rmd * sum2;
        //        fac = (1.0 - rmd) * sum + rmd * sum2;
    }
    else {
        return sum / maxamp;
        //        fac = sum / maxamp;
    }
}

void node_noise_texture_3d(vec3 co,float scale,float detail,float roughness,float distortion,out float value,out vec4 color){
    vec3 p = co * scale;
    if (distortion != 0.0) {
        int X, Y, Z;
        float fx, fy, fz;
        float x, y, z;
        p += vec3(snoise(p + random_vec3_offset(0.0)) * distortion,
        snoise(p + random_vec3_offset(1.0)) * distortion,
        snoise(p + random_vec3_offset(2.0)) * distortion);
    }

    value = fractal_noise(p, detail, roughness);
    color = vec4(value,
    fractal_noise(p + random_vec3_offset(3.0), detail, roughness),
    fractal_noise(p + random_vec3_offset(4.0), detail, roughness),
    1.0);
}
vec3 vector_noise(vec3 vector, float amount, float scale, float detail, float distortion){
    vec4 coll;
    float tmp;
    node_noise_texture_3d(vector, scale, detail, 0.5, amount, tmp, coll);
    vec3 col = coll.xyz;
    col -= vec3(0.5);
    return mix_add(amount, vector, col);
}
void oil(vec3 vector, float amount, float scale, float detail, float distortion, float oil_size, out vec4 col, out float fac){
    vec3 map_noised = vector_noise(vector, amount, scale*oil_size, detail, distortion);
    node_noise_texture_3d(map_noised, scale, detail, 0.5, distortion, fac, col);
}

float voronoi(vec3 coord,float scale,float smoothness,float randomness){
    randomness = clamp(randomness, 0.0, 1.0);
    smoothness = clamp(smoothness / 2.0, 0.0, 0.5);

    vec3 scaledCoord = coord * scale;
    vec3 cellPosition = floor(scaledCoord);
    vec3 localPosition = scaledCoord - cellPosition;

    float smoothDistance = 8.0;
    vec3 smoothColor = vec3(0.0);
    vec3 smoothPosition = vec3(0.0);
    for (int k = -2; k <= 2; k++) {
        for (int j = -2; j <= 2; j++) {
            for (int i = -2; i <= 2; i++) {
                vec3 cellOffset = vec3(i, j, k);
                vec3 pointPosition = cellOffset + hash_vec3_to_vec3(cellPosition + cellOffset) * randomness;
                float distanceToPoint = distance(pointPosition, localPosition);
                float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (smoothDistance - distanceToPoint) / smoothness);
                float correctionFactor = smoothness * h * (1.0 - h);
                smoothDistance = mix(smoothDistance, distanceToPoint, h) - correctionFactor;
            }
        }
    }
    return smoothDistance;
}
float gradient(vec3 map){
    return clamp(map.x, 0, 1);
}

//Procedural Planet
void continent_mask(vec3 map, float LandSize, float OceanFill, float deep_sea_cutoff, float detail, out float cont_mask, out float ocean_mask){
    LandSize = clamp(LandSize, 0, 1);
    OceanFill = clamp(OceanFill, 0, 1);
    vec4 col; float fac;
    oil(map, 0.625, 1.9, detail, 0.4, 1.8, col, fac);
    float fac2 = fac;
    fac = linear_rgb_curve(fac, LandSize, .75, 1.);
    fac = linear_rgb_curve(fac, OceanFill, 0, .009091);
    cont_mask = clamp(fac, 0, 1);

    fac2 = linear_rgb_curve(fac2, LandSize, .75-deep_sea_cutoff, 1.);
    fac2 = linear_rgb_curve(fac2, OceanFill, 0, 0.076364);
    ocean_mask = clamp(fac2, 0, 1);
}
void river_mask(vec3 map, float cont_mask, float thickness, float green_thickness, float detail, out float riv_mask, out float riv_green_mask){
    map = vector_noise(map, .012,100,1,0);
    map = vector_noise(map, .199,5,2,0);
    vec4 col; float fac;
    node_noise_texture_3d(map, 2, 1, .5, 0, fac, col);
    riv_mask = col_ramp(fac, .5, .5+thickness, 1, 0)*col_ramp(fac, .5-thickness,.5,0,1);
    riv_mask *= 1-cont_mask;
    riv_green_mask = col_ramp(fac, .5, .5+green_thickness, 1, 0)*col_ramp(fac, .5-green_thickness,.5,0,1);
}
float land_detail(vec3 map, float detail){
    vec4 col1; float fac1;
    vec4 col2; float fac2;
    oil(map, 0.331, 4.5, detail, .5, 5., col1, fac1);
    oil(map, 1, 1.8, detail, .5, 1., col2, fac2);
    fac1 = col_ramp(fac1, .255, .822, 0, 1);
    fac2 = col_ramp(fac2, .255, .822, 0, 1);
    return mix(fac1, fac2, 0.659);
}
float sea_detail(vec3 map, float ocean_mask, float deep_sea_brightness, float detail){
    vec4 col1; float fac1;
    vec4 col2; float fac2;
    oil(map, 0.206034, 5.5, detail, 1, 5., col1, fac1);
    oil(map, 1, 2.2, detail, 1.2, 1., col2, fac2);
    fac1 = col_ramp(fac1, .255, 1, 0, 1);
    fac2 = col_ramp(fac2, .255, 1, 0, deep_sea_brightness);
    return mix(fac1, fac2, ocean_mask);
}
float desert_mask(vec3 map, float riv_mask, float equator_offset, float detail){
    map = vector_noise(map, 1, 1.5, detail, 0);
    map = vector_noise(map, 1, 2, detail, 0);
    float mask = gradient(mat3(0, -1, 0, 1, 0, 0, 0, 0, 1)*map+vec3(equator_offset,0,0));
    mask *= gradient(mat3(0, 1, 0, -1, 0, 0, 0, 0, 1)*map+vec3(equator_offset,0,0));
    mask = col_ramp(mask, 0, 0.064, 0, 1);
    return clamp(mask - riv_mask, 0, 1);
}
float ice_caps_mask(vec3 map, float ice_caps_size, float detail){
    map = vector_noise(map, 0.137931, 5, detail, 0.3);
    float fac = mix(1., .05, ice_caps_size);
    float north_pole = clamp(linear_rgb_curve(gradient(mat3(0, -1, 0, 1, 0, 0, 0, 0, 1)*map), ice_caps_size, 0.99, 1),0,1);
    float south_pole = clamp(linear_rgb_curve(gradient(mat3(0, 1, 0, -1, 0, 0, 0, 0, 1)*map), ice_caps_size, 0.99, 1),0,1);
    return col_ramp(north_pole+south_pole, 0, 0.377273, 0, 1);
}
vec3 color_planet(float land_det, float sea_det, vec3 col_land, vec3 col_desert, vec3 col_sea, float land_mask, float des_mask, float caps_mask){
    vec3 col = mix(col_land, col_desert, des_mask);
    col = mix(col*land_det, col_sea*sea_det, land_mask);
    col = mix(col, vec3(1), caps_mask);
    return comb_rgb_curv_pre_def(col);
}
float roughness_planet(float land_det, float land_mask, float riv_mask, float river_str_rough_bump, float caps_mask){
    float rough = clamp(mix(land_det, land_det-riv_mask, river_str_rough_bump), 0, 1);
    rough = col_ramp(rough, 0.137931, 0.472414, 0, 1);
    rough = mix(rough, 0.027665, land_mask);
    rough = mix(rough, 0.834675, caps_mask);
    rough = clamp(rough, 0.027665, 1.);
    return sqrt(rough);
}
float height_planet(float land_det, float land_mask, float riv_mask, float river_str_rough_bump, float caps_mask){
    float height = clamp(mix(land_det, land_det-riv_mask, river_str_rough_bump), 0, 1);
    height = col_ramp(height, 0.144828, 0.496552, 0, 1);
    height = mix(height, 0, land_mask);
    height = mix(height, clamp(linear_rgb_curve(land_det, 1, 0, 0.323979), 0, 1), caps_mask);
    return height;
}
float cloud_mask(vec3 map){
    vec4 col1; float fac1;
    vec4 col2; float fac2;
    oil(map, 1, 2, 5, .7, 4.7, col1, fac1);
    oil(map, 1, 2, 5, .7, 1., col2, fac2);
    fac1 = col_ramp(fac1, .268966, 1, 0, 1);
    fac2 = col_ramp(fac2, .344828, .627587, 0, 1);
    float fac = col_ramp(mix(fac1, fac2, 0.644828), 0.444828, 1, 0, 1);
    //    fac = sqrt(fac);
    fac = clamp(fac*2,0,1);
    return fac;
    //    return 0.5<fac?1:0;
}

vec2 cartesian_to_polar(vec3 p){
    return vec2(atan2(p.y, p.x)/(2*pi), acos(p.z)/pi);
}

// since the radius is always one and the center is at vec3(0), these are also the normals
vec3 polar_to_cartisan(vec2 p){
    p = vec2(p.x*2*pi, p.y*pi);
    return vec3(cos(p.x)*sin(p.y), sin(p.x)*sin(p.y), cos(p.y));
}

void planet(vec3 p, out vec3 col, out float rough, out float height){
    const vec3 planet_col =  vec3(0.168252, 0.372686, 0.143013);
    const vec3 sea_col = vec3(0.156895, 0.296105, 0.791773);
    const vec3 desert_col = vec3(0.713180, 0.459846, 0.284079);
    const float river_str_col = 0.717;
    const float river_str_rough_bump = 0.383333;
    const float river_thickness = 0.002;
    const float river_green_thickness = 0.006;
    const float equator_offset = 0.4;
    const float deep_see_cutoff = 0.03;
    const float deep_sea_brightness = .15;
    const float ice_caps_size = 0.558333;
    const float detail = 20;

    vec3 map = p;
    float cont_mask, ocean_mask;
    continent_mask(map, .3, .3, deep_see_cutoff, detail, cont_mask, ocean_mask);
    float riv_mask, riv_green_mask;
    river_mask(map+vec3(10), cont_mask, river_thickness, river_green_thickness, detail, riv_mask, riv_green_mask);
    float des_mask = desert_mask(map, riv_green_mask, equator_offset, detail);
    float land_det = land_detail(map, detail);
    float sea_det = sea_detail(map, ocean_mask, deep_sea_brightness, detail);
    float caps_mask = ice_caps_mask(map, ice_caps_size, detail);

    col = color_planet(land_det, sea_det, planet_col, desert_col, sea_col, mix(cont_mask, cont_mask+riv_mask, river_str_col), des_mask, caps_mask);
    rough = roughness_planet(land_det, cont_mask, riv_mask, river_str_rough_bump, caps_mask);
    height = height_planet(land_det, cont_mask, riv_mask, river_str_rough_bump, caps_mask);
}

void main() {
    if (lastTime < 0) {
        uvec2 texelCoord = ivec2(tileOffset * workGroupSize * workGroupCount + gl_GlobalInvocationID.xy);
        //    uvec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
        ivec2 resolution = imageSize(albedo_plus_height);
        if (texelCoord.x >= resolution.x || texelCoord.y >= resolution.y) return;

        vec2 uv = vec2(texelCoord) / vec2(resolution);

        vec3 p = polar_to_cartisan(uv);

        vec3 col;
        float rough, height;
        planet(p, col, rough, height);

        imageStore(albedo_plus_height, ivec2(texelCoord), vec4(col, height));
    }
}