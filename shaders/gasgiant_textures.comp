#version 460 core

//const int texture_resolution = 512;
const uvec2 workGroupSize = uvec2(32);
const uvec2 workGroupCount = uvec2(4);

layout(local_size_x = workGroupSize.x, local_size_y = workGroupSize.y) in;
layout(rgba32f, binding = 0) writeonly uniform image2D gasgiant_albedo;

uniform uvec2 tileOffset;
//TODO: Frame statt time von C++ ansteuern
uniform float time;
uniform int frame;
uniform float lastTime;

const float pi = 3.14159265359;
float atan2(float y, float x){
    if (x > 0) return atan(y/x);
    if (x < 0 && y >= 0) return atan(y/x)+pi;
    if (x < 0 && y < 0) return atan(y/x)-pi;
    if(x == 0 && y > 0) return pi/2;
    if(x == 0 && y < 0) return -pi/2;
    return 0;  // this is x == 0 && y == 0 which is technically undefined
}
vec3 mix_add(float fac, vec3 col1, vec3 col2){
    fac = clamp(fac, 0., 1.);
    return mix(col1, col1 + col2, fac);
}
vec3 mix_mul(float fac, vec3 col1, vec3 col2){
    fac = clamp(fac, 0., 1.);
    return mix(col1, col1 * col2, fac);
}
float mix_overlay(float fac, float col1, float col2){
    fac = clamp(fac, 0.0, 1.0);
    float facm = 1.0 - fac;
    if (col1 < 0.5) return col1 * facm + 2.0 * fac * col2;
    else return 1.0 - (facm + 2.0 * fac * (1.0 - col2)) * (1.0 - col1);
}
vec3 mix_overlay(float fac, vec3 col1, vec3 col2)
{
    fac = clamp(fac, 0.0, 1.0);
    float facm = 1.0 - fac;

    vec3 outcol = col1;

    if (outcol.r < 0.5) outcol.r *= facm + 2.0 * fac * col2.r;
    else outcol.r = 1.0 - (facm + 2.0 * fac * (1.0 - col2.r)) * (1.0 - outcol.r);

    if (outcol.g < 0.5) outcol.g *= facm + 2.0 * fac * col2.g;
    else outcol.g = 1.0 - (facm + 2.0 * fac * (1.0 - col2.g)) * (1.0 - outcol.g);

    if (outcol.b < 0.5) outcol.b *= facm + 2.0 * fac * col2.b;
    else outcol.b = 1.0 - (facm + 2.0 * fac * (1.0 - col2.b)) * (1.0 - outcol.b);

    return outcol;
}


float linear_rgb_curve(float inp, float fac, float min, float max){
    float m = 1/(max-min);
    float b = -min*m;
    return mix(inp, inp*m+b, fac);
}
float col_ramp(float fac, float min, float max, float val_min, float val_max){
    float m = (val_max-val_min)/(max-min);
    float b = val_min-min*m;
    return (fac < min) ? val_min : ((fac > max) ? val_max : fac*m+b);
}
float col_ramp3(float fac, float x1, float x2, float x3, float val1, float val2, float val3){
    if (fac < x1) return val1;
    if (fac < x2) {
        float m = (val2-val1)/(x2-x1);
        float b = val1-x1*m;
        return fac*m+b;
    }
    if (fac < x3){
        float m = (val3-val2)/(x3-x2);
        float b = val2-x2*m;
        return fac*m+b;
    }
    return val3;
}
float col_ramp4(float fac, float x1, float x2, float x3, float x4, float val1, float val2, float val3, float val4){
    if (fac < x1) return val1;
    if (fac < x2) {
        float m = (val2-val1)/(x2-x1);
        float b = val1-x1*m;
        return fac*m+b;
    }
    if (fac < x3){
        float m = (val3-val2)/(x3-x2);
        float b = val2-x2*m;
        return fac*m+b;
    }
    if (fac < x4){
        float m = (val4-val3)/(x5-x3);
        float b = val3-x3*m;
        return fac*m+b;
    }
    return val4;
}

float uintToFloat(uint v) {
    return float(v) * (1.0 / float(0xffffffffu));
}
vec4 uintToFloat(uvec4 v) {
    return vec4(v) * (1.0 / float(0xffffffffu));
}

uint rot(uint x, uint k){
    return (x << k) | (x >> (32 - k));
}
uint final(uint a, uint b, uint c){
    c ^= b;
    c -= rot(b, 14);
    a ^= c;
    a -= rot(c, 11);
    b ^= a;
    b -= rot(a, 25);
    c ^= b;
    c -= rot(b, 16);
    a ^= c;
    a -= rot(c, 4);
    b ^= a;
    b -= rot(a, 14);
    c ^= b;
    c -= rot(b, 24);
    return c;
}
uint hash_uint2(uint kx, uint ky){
    uint a, b, c;
    a = b = c = 0xdeadbeefu + (2u << 2u) + 13u;
    b += ky;
    a += kx;
    return final(a,b,c);
}
uint hash_uint3(uint kx, uint ky, uint kz){
    uint a, b, c;
    a = b = c = 0xdeadbeefu + (3u << 2u) + 13u;
    c += kz;
    b += ky;
    a += kx;
    return final(a,b,c);
}
uint hash_uint4(uint kx, uint ky, uint kz, uint kw){
    uint a, b, c;
    a = b = c = 0xdeadbeefu + (4u << 2u) + 13u;

    a += kx;
    b += ky;
    c += kz;
    mix(a, b, c);

    a += kw;
    return final(a,b,c);
}
uint hash_int3(int kx, int ky, int kz){
    return hash_uint3(uint(kx), uint(ky), uint(kz));
}
float hash_uint2_to_float(uint kx, uint ky){
    return float(hash_uint2(kx, ky)) / float(0xFFFFFFFFu);
}
float hash_uint3_to_float(uint kx, uint ky, uint kz){
    return float(hash_uint3(kx, ky, kz)) / float(0xFFFFFFFFu);
}
float hash_uint4_to_float(uint kx, uint ky, uint kz, uint kw){
    return float(hash_uint4(kx, ky, kz, kw)) / float(0xFFFFFFFFu);
}
float hash_vec2_to_float(vec2 k){
    return hash_uint2_to_float(floatBitsToUint(k.x), floatBitsToUint(k.y));
}
float hash_vec3_to_float(vec3 k){
    return hash_uint3_to_float(floatBitsToUint(k.x), floatBitsToUint(k.y), floatBitsToUint(k.z));
}
float hash_vec4_to_float(vec4 k){
    return hash_uint4_to_float(floatBitsToUint(k.x), floatBitsToUint(k.y), floatBitsToUint(k.z), floatBitsToUint(k.w));
}
vec3 hash_vec3_to_vec3(vec3 k){
    return vec3(hash_vec3_to_float(k), hash_vec4_to_float(vec4(k, 1.0)), hash_vec4_to_float(vec4(k, 2.0)));
}
float tri_mix(float v0, float v1, float v2, float v3, float v4, float v5,float v6,float v7,float x,float y,float z){
    float x1 = 1.0 - x;
    float y1 = 1.0 - y;
    float z1 = 1.0 - z;
    return z1 * (y1 * (v0 * x1 + v1 * x) + y * (v2 * x1 + v3 * x)) +
    z * (y1 * (v4 * x1 + v5 * x) + y * (v6 * x1 + v7 * x));
}
float fade(float t){
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}
float negate_if(float value, uint condition){
    return (condition != 0u) ? -value : value;
}
vec3 random_vec3_offset(float inp){
    return vec3(100.0 + hash_vec2_to_float(vec2(inp, 0.0)) * 100.0,
    100.0 + hash_vec2_to_float(vec2(inp, 1.0)) * 100.0,
    100.0 + hash_vec2_to_float(vec2(inp, 2.0)) * 100.0);
}
float noise_grad(uint hash, float x, float y, float z){
    uint h = hash & 15u;
    float u = h < 8u ? x : y;
    float vt = ((h == 12u) || (h == 14u)) ? x : z;
    float v = h < 4u ? y : vt;
    return negate_if(u, h & 1u) + negate_if(v, h & 2u);
}
float noise_perlin(vec3 vec){
    int X = int(floor(vec.x));
    int Y = int(floor(vec.y));
    int Z = int(floor(vec.z));
    float fx = fract(vec.x);
    float fy = fract(vec.y);
    float fz = fract(vec.z);

    float u = fade(fx);
    float v = fade(fy);
    float w = fade(fz);

    float r = tri_mix(noise_grad(hash_int3(X, Y, Z), fx, fy, fz),
    noise_grad(hash_int3(X + 1, Y, Z), fx - 1, fy, fz),
    noise_grad(hash_int3(X, Y + 1, Z), fx, fy - 1, fz),
    noise_grad(hash_int3(X + 1, Y + 1, Z), fx - 1, fy - 1, fz),
    noise_grad(hash_int3(X, Y, Z + 1), fx, fy, fz - 1),
    noise_grad(hash_int3(X + 1, Y, Z + 1), fx - 1, fy, fz - 1),
    noise_grad(hash_int3(X, Y + 1, Z + 1), fx, fy - 1, fz - 1),
    noise_grad(hash_int3(X + 1, Y + 1, Z + 1), fx - 1, fy - 1, fz - 1),
    u,
    v,
    w);

    return r;
}
float noise_scale3(float result){
    return 0.9820 * result;
}
float snoise(vec3 p){
    float r = noise_perlin(p);
    return (isinf(r)) ? 0.0 : noise_scale3(r);
}
float noise(vec3 p){
    return 0.5 * snoise(p) + 0.5;
}
float fractal_noise(vec3 p, float octaves, float roughness){
    float fscale = 1.0;
    float amp = 1.0;
    float maxamp = 0.0;
    float sum = 0.0;
    octaves = clamp(octaves, 0.0, 15.0);
    int n = int(octaves);
    for (int i = 0; i <= n; i++) {
        float t = noise(fscale * p);
        sum += t * amp;
        maxamp += amp;
        amp *= clamp(roughness, 0.0, 1.0);
        fscale *= 2.0;
    }
    float rmd = octaves - floor(octaves);
    if (rmd != 0.0) {
        float t = noise(fscale * p);
        float sum2 = sum + t * amp;
        sum /= maxamp;
        sum2 /= maxamp + amp;
        return (1.0 - rmd) * sum + rmd * sum2;
        //        fac = (1.0 - rmd) * sum + rmd * sum2;
    }
    else {
        return sum / maxamp;
        //        fac = sum / maxamp;
    }
}

void node_noise_texture_3d(vec3 co,float scale,float detail,float roughness,float distortion,out float value,out vec4 color){
    vec3 p = co * scale;
    if (distortion != 0.0) {
        int X, Y, Z;
        float fx, fy, fz;
        float x, y, z;
        p += vec3(snoise(p + random_vec3_offset(0.0)) * distortion,
        snoise(p + random_vec3_offset(1.0)) * distortion,
        snoise(p + random_vec3_offset(2.0)) * distortion);
    }

    value = fractal_noise(p, detail, roughness);
    color = vec4(value,
    fractal_noise(p + random_vec3_offset(3.0), detail, roughness),
    fractal_noise(p + random_vec3_offset(4.0), detail, roughness),
    1.0);
}

vec3 vector_noise(vec3 vector, float amount, float scale, float detail, float distortion){
    vec4 coll;
    float tmp;
    node_noise_texture_3d(vector, scale, detail, 0.5, amount, tmp, coll);
    vec3 col = coll.xyz;
    col -= vec3(0.5);
    return mix_add(amount, vector, col);
}
void oil(vec3 vector, float amount, float scale, float detail, float distortion, float oil_size, out vec4 col, out float fac){
    vec3 map_noised = vector_noise(vector, amount, scale*oil_size, detail, distortion);
    node_noise_texture_3d(map_noised, scale, detail, 0.5, distortion, fac, col);
}

float voronoi(vec3 coord,float scale,float smoothness,float randomness){
    randomness = clamp(randomness, 0.0, 1.0);
    smoothness = clamp(smoothness / 2.0, 0.0, 0.5);

    vec3 scaledCoord = coord * scale;
    vec3 cellPosition = floor(scaledCoord);
    vec3 localPosition = scaledCoord - cellPosition;

    float smoothDistance = 8.0;
    vec3 smoothColor = vec3(0.0);
    vec3 smoothPosition = vec3(0.0);
    for (int k = -2; k <= 2; k++) {
        for (int j = -2; j <= 2; j++) {
            for (int i = -2; i <= 2; i++) {
                vec3 cellOffset = vec3(i, j, k);
                vec3 pointPosition = cellOffset + hash_vec3_to_vec3(cellPosition + cellOffset) * randomness;
                float distanceToPoint = distance(pointPosition, localPosition);
                float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (smoothDistance - distanceToPoint) / smoothness);
                float correctionFactor = smoothness * h * (1.0 - h);
                smoothDistance = mix(smoothDistance, distanceToPoint, h) - correctionFactor;
            }
        }
    }
    return smoothDistance;
}

float wave_texture(vec3 p,float scale,float distortion,float detail,float detail_scale,float detail_roughness,float phase){
    p *= scale;
    /* Prevent precision issues on unit coordinates. */
    p = (p + 0.000001) * 0.999999;
    float n;
    n = (p.x + p.y + p.z) * 10.0;
    n += phase;
    if (distortion != 0.0) {
        n += distortion * (fractal_noise(p * detail_scale, detail, detail_roughness) * 2.0 - 1.0);
    }
    return 0.5 + 0.5 * sin(n - pi/2);
}


vec2 cartesian_to_polar(vec3 p){
    return vec2(atan2(p.y, p.x)/(2*pi), acos(p.z)/pi);
}

// since the radius is always one and the center is at vec3(0), these are also the normals
vec3 polar_to_cartisan(vec2 p){
    p = vec2(p.x*2*pi, p.y*pi);
    return vec3(cos(p.x)*sin(p.y), sin(p.x)*sin(p.y), cos(p.y));
}

vec3 coord_gasGiant(vec3 p, float rot, float offset){
    rot *= pi/180;
    p = mat3(cos(rot),-sin(rot),0,sin(rot),cos(rot),0,0,0,1)*p;
    p.x += offset;

    p = vector_noise(p, .074, 11, 2, 0);
    float fac = voronoi(p, 3.23, 0, 1);
    fac = color_ramp(fac*fac, 0, .159, 1, 0);
    //rotating the space so that the bands will be rotated correctly
    rot1 = 45*pi/180;
    rot2 = -35*pi/180;
    p = mat3(cos(rot1),0,-sin(rot1),0,1,0,sin(rot1),0,cos(rot1))*p;
    p = mat3(1,0,0,0,cos(rot2),-sin(rot2),0,sin(rot2),cos(rot2))*p;
    return mix_add(.095,p, vec3(fac));
}

vec3 gasGiant(vec3 p, float rot, float offset){
    vec3 col = vec3(0.500000, 0.193712, 0.075334);

    p = coord_gasGiant(p, rot, offset);
    //Banding
    float fac1 = wave_texture(p,.5,1,1,1,.5,1.571);
    float fac2 = wave_texture(vector_noise(p,.107,15.8,5,1),1.21,1,1,2,.5,1.571);
    float banding = color_ramp(mix(fac1,fac2,.5),.344,.808,1,0);

    float fac;
    vec3 rcol;
    oil(p, .233, 3.04, 5, 2.3, 4.7, rcol, fac);

    return mix_overlay(banding, color_ramp(fac, .159, .913, .102, 1), col);
}

void main() {
    uvec2 texelCoord = ivec2(tileOffset * workGroupSize * workGroupCount + gl_GlobalInvocationID.xy);
    //    uvec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 resolution = imageSize(planet_albedo);
    if (texelCoord.x >= resolution.x || texelCoord.y >= resolution.y) return;

    vec2 uv = vec2(texelCoord) / vec2(resolution);

    vec3 p = polar_to_cartisan(uv);

    imageStore(gasgiant_albedo, ivec2(texelCoord), vec4(gasGiant(p, .1*frame, .001*frame), 1));
}