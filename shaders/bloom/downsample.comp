#version 430 core

layout(local_size_x = 32, local_size_y = 32) in;
layout(binding = 0) uniform sampler2D src;
layout(rgba32f, binding = 1) uniform image2D dst;

uniform uint srcLod;

vec4 box4(vec4 p0, vec4 p1, vec4 p2, vec4 p3) {
    return (p0 + p1 + p2 + p3) * 0.25;
}

void main() {
    vec2 texelCoord = vec2(gl_GlobalInvocationID.xy + vec2(0.5)) / imageSize(dst);
    vec2 texelSize = vec2(1) / imageSize(dst);

    vec4 a = textureLodOffset(src, texelCoord, srcLod, ivec2(-2, -2));
    vec4 b = textureLodOffset(src, texelCoord, srcLod, ivec2( 0, -2));
    vec4 c = textureLodOffset(src, texelCoord, srcLod, ivec2( 2, -2));
    vec4 d = textureLodOffset(src, texelCoord, srcLod, ivec2(-1, -1));
    vec4 e = textureLodOffset(src, texelCoord, srcLod, ivec2( 1, -1));
    vec4 f = textureLodOffset(src, texelCoord, srcLod, ivec2(-2,  0));
    vec4 g = textureLodOffset(src, texelCoord, srcLod, ivec2( 0,  0));
    vec4 h = textureLodOffset(src, texelCoord, srcLod, ivec2( 2,  0));
    vec4 i = textureLodOffset(src, texelCoord, srcLod, ivec2(-1,  1));
    vec4 j = textureLodOffset(src, texelCoord, srcLod, ivec2( 1,  1));
    vec4 k = textureLodOffset(src, texelCoord, srcLod, ivec2(-2,  2));
    vec4 l = textureLodOffset(src, texelCoord, srcLod, ivec2( 0,  2));
    vec4 m = textureLodOffset(src, texelCoord, srcLod, ivec2( 2,  2));

    vec4 color = box4(d, e, i, j) * 0.5
            + box4(a, b, g, f) * 0.125
            + box4(b, c, h, g) * 0.125
            + box4(f, g, l, k) * 0.125
            + box4(g, h, m, l) * 0.125;

    imageStore(dst, ivec2(gl_GlobalInvocationID.xy), color);
}